name: release-on-tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g. v0.1.2)"
        required: true

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Resolve tag
        id: tag
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "value=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            # on push/tag events this is like "v0.1.2"
            echo "value=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout ${{ steps.tag.outputs.value }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.tag.outputs.value }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path .\requirements.txt) {
            pip install -r .\requirements.txt
          } else {
            pip install pyinstaller
          }

      - name: Generate version_info.txt from tag
        shell: pwsh
        run: |
          # Resolve tag (fallback to GITHUB_REF just in case)
          $tag = "${{ steps.tag.outputs.value }}"
          if (-not $tag) { $tag = $env:GITHUB_REF -replace '^refs/tags/', '' }

          # For display strings, keep the full tag without the leading 'v'
          $displayVer = ($tag -replace '^v','')

          # For numeric tuple, strip any -pre/+build suffix, then split & coerce to ints
          $numericCore = ($displayVer -replace '[-+].*$','')
          if ([string]::IsNullOrWhiteSpace($numericCore)) { $numericCore = '0.0.0' }

          $parts = $numericCore -split '\.'
          $nums  = 0..3 | ForEach-Object {
            if ($_ -lt $parts.Count -and $parts[$_] -match '^\d+$') { [int]$parts[$_] } else { 0 }
          }

          $tuple   = ($nums -join ', ')   # e.g., "1, 2, 3, 0" for filevers/prodvers
          $fileVer = ($nums -join '.')    # e.g., "1.2.3.0" if you ever need it

          $lines = @(
            'VSVersionInfo(',
            '  ffi=FixedFileInfo(',
            "    filevers=($tuple),",
            "    prodvers=($tuple),",
            '    mask=0x3f, flags=0x0, OS=0x40004, fileType=0x1, subtype=0x0, date=(0, 0)',
            '  ),',
            "  kids=[StringFileInfo([StringTable('040904B0', [",
            "    StringStruct('FileDescription', 'DesktopTileLauncher'),",
            "    StringStruct('FileVersion', '$displayVer'),",
            "    StringStruct('ProductName', 'DesktopTileLauncher'),",
            "    StringStruct('ProductVersion', '$displayVer')",
            "  ])]), VarFileInfo([VarStruct('Translation', [1033, 1200])])]",
            ')'
          )

          $lines -join "`r`n" | Set-Content -Path version_info.txt -Encoding ascii
          Write-Host '--- version_info.txt ---'
          Get-Content version_info.txt
          Write-Host "Parsed tag: $tag"
          Write-Host "Numeric tuple: $tuple"
          Write-Host "Display version: $displayVer"



      - name: Build with PyInstaller
        shell: pwsh
        run: |
          if (Test-Path .\DesktopTileLauncher.spec) {
            pyinstaller .\DesktopTileLauncher.spec
          } else {
            pyinstaller --onefile .\tile_launcher.py --name DesktopTileLauncher --icon DesktopTileLauncher.ico --version-file version_info.txt
          }

      - name: Rename EXE to include tag
        shell: pwsh
        run: |
          $tag = "${{ steps.tag.outputs.value }}"
          $exe = (Get-ChildItem -Recurse -File dist -Filter *.exe | Select-Object -First 1).FullName
          if (-not $exe) { throw "No exe found under dist" }
          $dir = Split-Path $exe -Parent
          $dst = Join-Path $dir ("DesktopTileLauncher-" + $tag + ".exe")
          Move-Item -Force $exe $dst

      - name: Generate checksums
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -File dist -Filter "DesktopTileLauncher-*.exe" | Select-Object -First 1
          $hash = Get-FileHash $exe.FullName -Algorithm SHA256
          "$($hash.Hash)  $($exe.Name)" | Out-File -Encoding ascii -FilePath dist\SHA256SUMS.txt

      - name: Update release with checksums
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.value }}
          files: |
            dist/**/DesktopTileLauncher-*.exe
            dist/**/SHA256SUMS.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DesktopTileLauncher-${{ steps.tag.outputs.value }}
          path: dist/**/DesktopTileLauncher-*.exe

      - name: List release payload
        shell: pwsh
        run: |
          Write-Host "Files under dist:"
          Get-ChildItem dist -Recurse -File | Select-Object FullName
          Write-Host "License at repo root (if any):"
          if (Test-Path LICENSE) { Get-Item LICENSE | Format-List }
          if (Test-Path LICENSE.md) { Get-Item LICENSE.md | Format-List }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.value }}
          name: ${{ steps.tag.outputs.value }}
          generate_release_notes: true
          files: |
            dist/**/DesktopTileLauncher-*.exe
            dist/**/DesktopTileLauncher-*-onedir-win-x64.zip
            dist/**/SHA256SUMS.txt
            LICENSE*                                  # <-- handles LICENSE and LICENSE.md
          fail_on_unmatched_files: false



