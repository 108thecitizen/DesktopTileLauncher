name: release-on-tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g. v0.1.2)"
        required: true

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Resolve tag
        id: tag
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "value=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout ${{ steps.tag.outputs.value }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.tag.outputs.value }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path .\requirements.txt) {
            pip install -r .\requirements.txt
          } else {
            pip install pyinstaller
          }

      - name: Generate Windows version file from tag
        shell: pwsh
        run: |
          $tag = "${{ steps.tag.outputs.value }}"
          $ver = $tag -replace '^v',''
          $parts = $ver.Split('.')
          while ($parts.Count -lt 4) { $parts += '0' }
          $tuple = ($parts | ForEach-Object { [int]$_ }) -join ','
          $txt = @"
            VSVersionInfo(
              ffi=FixedFileInfo(
                filevers=($tuple),
                prodvers=($tuple),
                mask=0x3f, flags=0x0, OS=0x40004, fileType=0x1, subType=0x0, date=(0, 0)
              ),
              kids=[StringFileInfo([StringTable(''040904B0'', [
                StringStruct(''FileDescription'', ''DesktopTileLauncher''),
                StringStruct(''FileVersion'', ''$ver''),
                StringStruct(''ProductName'', ''DesktopTileLauncher''),
                StringStruct(''ProductVersion'', ''$ver'')
              ])]), VarFileInfo([VarStruct(''Translation'', [1033, 1200])])]
            )
"@

          Set-Content -Path version_info.txt -Value $txt -Encoding ascii

      - name: Show version_info.txt (debug)
        if: always()
        shell: pwsh
        run: Get-Content .\version_info.txt | ForEach-Object { '>> ' + $_ }

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          if (Test-Path .\DesktopTileLauncher.spec) {
            pyinstaller .\DesktopTileLauncher.spec
          } else {
            pyinstaller --onefile .\DesktopTileLauncher.py --name DesktopTileLauncher --version-file version_info.txt
          }

      - name: List dist (debug)
        shell: pwsh
        run: |
          if (Test-Path .\dist) {
            Get-ChildItem -Recurse -File .\dist | Format-Table FullName, Length
          } else {
            Write-Error "dist/ not found"
          }

      - name: Rename EXE to include tag
        shell: pwsh
        run: |
          $tag = "${{ steps.tag.outputs.value }}"
          $exe  = (Get-ChildItem -Recurse -File dist -Filter *.exe | Select-Object -First 1).FullName
          if (-not $exe) { throw "No exe found under dist" }
          $dir  = Split-Path $exe -Parent
          $dst  = Join-Path $dir ("DesktopTileLauncher-" + $tag + ".exe")
          Move-Item -Force $exe $dst

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DesktopTileLauncher-${{ steps.tag.outputs.value }}
          path: dist/**/DesktopTileLauncher-*.exe

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.value }}
          name: ${{ steps.tag.outputs.value }}
          generate_release_notes: true
          files: |
            dist/**/DesktopTileLauncher-*.exe
          fail_on_unmatched_files: true