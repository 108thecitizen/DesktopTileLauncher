name: build-windows-exe

on:
  push:
    branches: [ main ]   # you're on main today
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # get full history so tags are reachable

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install build deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path -Path requirements.txt) {
            pip install -r requirements.txt
          } else {
            pip install pyinstaller
          }

      - name: Generate version_info.txt
        shell: pwsh
        run: |
          # Ensure tags are present in this shallow checkout
          git fetch --force --tags 2>$null

          # Prefer the current ref if it's a tag; otherwise fall back to the latest reachable tag
          $tag = $null
          if ($env:GITHUB_REF -match '^refs/tags/') { $tag = $env:GITHUB_REF -replace '^refs/tags/','' }
          if (-not $tag) { $tag = (git describe --tags --abbrev=0 2>$null) }
          if (-not $tag) { $tag = 'v0.0.0' }   # final fallback for branch builds with no tags
          $global:LASTEXITCODE = 0             # keep the step from failing due to 'git describe' exit code

          # For display strings, keep the full tag without the leading 'v'
          $displayVer = ($tag -replace '^v','')

          # For numeric tuple, strip any -pre/+build suffix, split, and coerce to ints (pad to 4 parts)
          $numericCore = ($displayVer -replace '[-+].*$','')
          if ([string]::IsNullOrWhiteSpace($numericCore)) { $numericCore = '0.0.0' }

          $parts = $numericCore -split '\.'
          $nums  = 0..3 | ForEach-Object {
            if ($_ -lt $parts.Count -and $parts[$_] -match '^\d+$') { [int]$parts[$_] } else { 0 }
          }

          $tuple   = ($nums -join ', ')    # e.g., "1, 2, 3, 0"
          $fileVer = ($nums -join '.')     # e.g., "1.2.3.0" (handy if you want numeric strings)

          $lines = @(
            'VSVersionInfo(',
            '  ffi=FixedFileInfo(',
            "    filevers=($tuple),",
            "    prodvers=($tuple),",
            '    mask=0x3f, flags=0x0, OS=0x40004, fileType=0x1, subtype=0x0, date=(0, 0)',
            '  ),',
            "  kids=[StringFileInfo([StringTable('040904B0', [",
            "    StringStruct('FileDescription', 'DesktopTileLauncher'),",
            "    StringStruct('FileVersion', '$displayVer'),",
            "    StringStruct('ProductName', 'DesktopTileLauncher'),",
            "    StringStruct('ProductVersion', '$displayVer')",
            "  ])]), VarFileInfo([VarStruct('Translation', [1033, 1200])])]",
            ')'
          )

          $lines -join "`r`n" | Set-Content -Path version_info.txt -Encoding ascii
          Write-Host '--- version_info.txt ---'
          Get-Content version_info.txt
          Write-Host "Derived tag: $tag"
          Write-Host "Numeric tuple: $tuple"
          Write-Host "Display version: $displayVer"


      - name: Build with PyInstaller
        shell: pwsh
        run: |
          if (Test-Path .\DesktopTileLauncher.spec) {
            pyinstaller .\DesktopTileLauncher.spec
          } else {
            pyinstaller --onefile .\tile_launcher.py --name DesktopTileLauncher --icon DesktopTileLauncher.ico --version-file version_info.txt
          }

        # Add this right before "Upload artifact"
      - name: Sanitize artifact name
        id: artifact_vars
        shell: pwsh
        run: |
          # Build the raw name the way you like it
          $raw = "DesktopTileLauncher-$env:GITHUB_REF_NAME-${{ github.run_number }}"
          # Replace characters that upload-artifact forbids:  " : < > | * ? \ / and newlines
          $safe = $raw -replace '[<>:"/\\|?*\r\n]+', '-'
          # Collapse runs of '-' and trim leading/trailing '-'
          $safe = ($safe -replace '-{2,}', '-').Trim('-')
          # Stay well under the 255-char limit for artifact names
          if ($safe.Length -gt 240) { $safe = $safe.Substring(0,240) }
          "name=$safe" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_vars.outputs.name }}
          path: |
            dist/**/DesktopTileLauncher.exe
            dist/**/DesktopTileLauncher-*.exe
          # optional but helpful:
          # if-no-files-found: error

